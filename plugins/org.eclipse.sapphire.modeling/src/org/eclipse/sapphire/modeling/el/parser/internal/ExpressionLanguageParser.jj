/******************************************************************************
 * Copyright (c) 2015 Oracle
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Konstantin Komissarchik - initial implementation and ongoing maintenance
 ******************************************************************************/


/***********
 * OPTIONS *
 ***********/

options 
{
    JAVA_UNICODE_ESCAPE = false;
    UNICODE_INPUT = true;
    STATIC = false;
}


/********************
 * PARSER JAVA CODE *
 ********************/

PARSER_BEGIN( ExpressionLanguageParserImpl )
package org.eclipse.sapphire.modeling.el.parser.internal;

import java.util.*;
import java.math.*;
import org.eclipse.sapphire.modeling.el.*;

public class ExpressionLanguageParserImpl 
{
}
PARSER_END( ExpressionLanguageParserImpl )


/**********
 * TOKENS *
 **********/

/* Tokens outside of a ${...} construct. */

<DEFAULT> TOKEN :
{
    < NON_EXPRESSION_TEXT : ( ~[ "$" ] )+ | ( "$" ( ~[ "{", "$" ] )+ ) | "$" >
|
    < START_EXPRESSION : "${" > : IN_EXPRESSION
}

/* Tokens inside of a ${...} construct. */

<IN_EXPRESSION> SKIP : { " " | "\t" | "\n" | "\r" }

<IN_EXPRESSION> TOKEN :
{
    < INTEGER_LITERAL : [ "0" - "9" ] ( [ "0" - "9" ] )* >
|
    < DECIMAL_LITERAL :
        ( [ "0" - "9" ] )+ "." ( [ "0" - "9" ] )* ( <EXPONENT> )? |
        "." ( [ "0" - "9" ] )+ ( <EXPONENT> )? |
        ( [ "0" - "9" ] )+ <EXPONENT>
    >
|
    < #EXPONENT : [ "e", "E" ] ( [ "+", "-" ] )? ( [ "0" - "9" ] )+ >
|
    < STRING_LITERAL :
        ( "\"" ( ( ~[ "\"", "\\" ] ) | ( "\\" ( [ "\\", "\"" ] ) ) )* "\"" ) |
        ( "\'" ( ( ~[ "\'", "\\" ] ) | ( "\\" ( [ "\\", "\'" ] ) ) )* "\'" )
    >
| 
    < TRUE : "true" >
| 
    < FALSE : "false" >
| 
    < NULL : "null" >
| 
    < END_EXPRESSION : "}" > : DEFAULT
| 
    < DOT : "." >
| 
    < GT : ( ">" | [ "g", "G" ] [ "t", "T" ] ) >
| 
    < LT : ( "<" | [ "l", "L" ] [ "t", "T" ] ) >
| 
    < EQ : ( "==" | [ "e", "E" ] [ "q", "Q" ] ) >
| 
    < LE : ( "<=" | [ "l", "L" ] [ "e", "E" ] ) >
| 
    < GE : ( ">=" | [ "g", "G" ] [ "e", "E" ] ) >
| 
    < NE : ( "!=" | [ "n", "N" ] [ "e", "E" ] ) >
|
    < IN : [ "i", "I" ] [ "n", "N" ] >
| 
    < LPAREN : "(" >
| 
    < RPAREN : ")" >
| 
    < COMMA : "," >
| 
    < COLON : ":" >
| 
    < QUESTION_MARK : "?" >
| 
    < LBRACKET : "[" >
| 
    < RBRACKET : "]" >
| 
    < PLUS : "+" >
| 
    < MINUS : "-" >
| 
    < MULTIPLY : "*" >
| 
    < DIVIDE : ( "/" | [ "d", "D" ] [ "i", "I" ] [ "v", "V" ] ) >
| 
    < MODULUS : ( "%" | [ "m", "M" ] [ "o", "O" ] [ "d", "D" ] ) >
| 
    < NOT : ( "!" | [ "n", "N" ] [ "o", "O" ] [ "t", "T" ] ) >
| 
    < AND : ( "&&" | [ "a", "A" ] [ "n", "N" ] [ "d", "D" ] ) >
| 
    < OR : ( "||" | [ "o", "O" ] [ "r", "R" ] ) >
| 
    < EMPTY : [ "e", "E" ] [ "m", "M" ] [ "p", "P" ] [ "t", "T" ] [ "y", "Y" ] >
| 
    < IDENTIFIER : <LETTER> ( <LETTER> | <DIGIT> )* >
|
    < #LETTER :
        [
            "\u0024",
            "\u0041"-"\u005a",
            "\u005f",
            "\u0061"-"\u007a",
            "\u00c0"-"\u00d6",
            "\u00d8"-"\u00f6",
            "\u00f8"-"\u00ff",
            "\u0100"-"\u1fff",
            "\u3040"-"\u318f",
            "\u3300"-"\u337f",
            "\u3400"-"\u3d2d",
            "\u4e00"-"\u9fff",
            "\uf900"-"\ufaff"
        ]
    >
|
    < #DIGIT :
        [
            "\u0030"-"\u0039",
            "\u0660"-"\u0669",
            "\u06f0"-"\u06f9",
            "\u0966"-"\u096f",
            "\u09e6"-"\u09ef",
            "\u0a66"-"\u0a6f",
            "\u0ae6"-"\u0aef",
            "\u0b66"-"\u0b6f",
            "\u0be7"-"\u0bef",
            "\u0c66"-"\u0c6f",
            "\u0ce6"-"\u0cef",
            "\u0d66"-"\u0d6f",
            "\u0e50"-"\u0e59",
            "\u0ed0"-"\u0ed9",
            "\u1040"-"\u1049"
        ]
    >
| 
    < ILLEGAL_CHARACTER : ( ~[] ) >   /* Avoid TokenMgrErrors. Handle in parser. */
}


/***********
 * GRAMMAR *
 ***********/

Function Start() :
{
    Token t = null;
    List<Function> functions = new ArrayList<Function>();
    Function f = null;
}
{
    (
        (
            t = <NON_EXPRESSION_TEXT>
        |
            <START_EXPRESSION> f = Expression() <END_EXPRESSION>
        )
        {
            if( t != null )
            {
                f = Literal.create( t.image );
            }
            
            functions.add( f );
        
            t = null;
            f = null;
        }
    )*
    {
        final int count = functions.size();
        
        if( count == 0 )
        {
            return null;
        }
        else if( count == 1 )
        {
            return functions.get( 0 );
        }
        else
        {
            return ConcatFunction.create( functions );
        }
    }
}


Function Expression() :
{
    Function res = null;
}
{
    res = ConditionalExpression()
    { 
        return res; 
    }
}


Function ConditionalExpression() :
{
    Function res = null;
    Function x = null;
    Function y = null;
}
{
    res = OrExpression()
    (
        <QUESTION_MARK>
        x = OrExpression()
        <COLON>
        y = OrExpression()
        {
            res = ConditionalFunction.create( res, x, y );
        }
    )?
    {
        return res;
    }
}


Function OrExpression() :
{
    Function res = null;
    Function f = null;
}
{
    res = AndExpression()
    (
        <OR>
        f = AndExpression()
        {
            res = OrFunction.create( res, f );
        }
    )*
    {
        return res;
    }
}


Function AndExpression() :
{
    Function res = null;
    Function f = null;
}
{
    res = EqualityExpression()
    (
        <AND>
        f = EqualityExpression()
        {
            res = AndFunction.create( res, f );
        }
    )*
    {
        return res;
    }
}


Function EqualityExpression() :
{
    Function res;
    Function f;
    int ftype;
}
{
    res = RelationalExpression()
    (
        (
            <EQ>  { ftype = 1; } |
            <NE>  { ftype = 2; } |
            <IN>  { ftype = 3; }
        )
        f = RelationalExpression()
        {
            if( ftype == 3 )
            {
                res = InFunction.create( res, f );
            }
            else
            {
                res = EqualityFunction.create( res, f );
            
                if( ftype == 2 )
                {
                    res = NotFunction.create( res );
                }
            }
        }
    )*
    {
        return res;
    }
}


Function RelationalExpression() :
{
    Function res;
    Function f;
    int op;
}
{
    res = AddExpression()
    (
        (
            <LT>  { op = 1; } |
            <GT>  { op = 2; } |
            <GE>  { op = 3; } |
            <LE>  { op = 4; }
        )
        f = AddExpression()
        {
            switch( op )
            {
                case 1:
                {
                    res = LessThanFunction.create( res, f );
                    break;
                }
                case 2:
                {
                    res = GreaterThanFunction.create( res, f );
                    break;
                }
                case 3:
                {
                    res = GreaterThanOrEqualFunction.create( res, f );
                    break;
                }
                case 4:
                {
                    res = LessThanOrEqualFunction.create( res, f );
                    break;
                }
                default:
                {
                    throw new IllegalStateException();
                }
            }
        }
    )*
    {
        return res;
    }
}


Function AddExpression() :
{
    Function res;
    Function f;
    int op;
}
{
    res = MultiplyExpression()
    (
        (
            <PLUS>   { op = 1; } |
            <MINUS>  { op = 2; }
        )
        f = MultiplyExpression()
        {
            switch( op )
            {
                case 1:
                {
                    res = AddFunction.create( res, f );
                    break;
                }
                case 2:
                {
                    res = SubtractFunction.create( res, f );
                    break;
                }
                default:
                {
                    throw new IllegalStateException();
                }
            }
        }
    )*
    {
        return res;
    }
}


Function MultiplyExpression() :
{
    Function res;
    Function f;
    int op;
}
{
    res = UnaryExpression()
    (
        (
            <MULTIPLY>  { op = 1; } |
            <DIVIDE>    { op = 2; } |
            <MODULUS>   { op = 3; }
        )
        f = UnaryExpression()
        {
            switch( op )
            {
                case 1:
                {
                    res = MultiplyFunction.create( res, f );
                    break;
                }
                case 2:
                {
                    res = DivideFunction.create( res, f );
                    break;
                }
                case 3:
                {
                    res = ModuloFunction.create( res, f );
                    break;
                }
                default:
                {
                    throw new IllegalStateException();
                }
            }
        }
    )*
    {
        return res;
    }
}


Function UnaryExpression() :
{
    Function res;
    List<Integer> ops = new ArrayList<Integer>();
}
{
    (
        <NOT>    { ops.add( 1 ); } |
        <MINUS>  { ops.add( 2 ); } |
        <EMPTY>  { ops.add( 3 ); }
    )*
    res = Value()
    {
        for( int i = ops.size() - 1; i >= 0; i-- )
        {
            final int op = ops.get( i );
                
            switch( op )
            {
                case 1:
                {
                    res = NotFunction.create( res );
                    break;
                }
                case 2:
                {
                    res = ArithmeticNegationFunction.create( res );
                    break;
                }
                case 3:
                {
                    res = EmptyFunction.create( res );
                    break;
                }
                default:
                {
                    throw new IllegalStateException();
                }
            }
        }
            
        return res;
    }
}


Function Value() :
{
    Function res;
    Function f;
    String str;
}
{
    (
        res = Literal()
    |
        <LPAREN> res = Expression() <RPAREN>
    |
        LOOKAHEAD( QualifiedName() <LPAREN> ) res = FunctionInvocation( null ) 
    |
        str = Identifier() 
        {
            res = PropertyAccessFunction.create( str );
        }
    )
    (
        (
            <DOT>
            (
                LOOKAHEAD( QualifiedName() <LPAREN> ) res = FunctionInvocation( res )
            |
                str = Identifier() 
                {
                    res = PropertyAccessFunction.create( res, Literal.create( str ) );
                }
            ) 
        |
            <LBRACKET> f = Expression() <RBRACKET>
            {
                res = PropertyAccessFunction.create( res, f );
            }
        )
    )*
    {
        return res;
    }
}


Function FunctionInvocation( Function context ) :
{
    String name;
    Function f;
    
    List<Function> operands = new ArrayList<Function>();
    
    if( context != null )
    {
        operands.add( context );
    }
}
{
    (
        name = QualifiedName()
        <LPAREN>
        (
            f = Expression() { operands.add( f ); }
            (
                <COMMA>
                f = Expression() { operands.add( f ); }
            )*
        )?
        <RPAREN>
    )
    {
        return DeferredFunction.create( name, operands );
    }
}


Literal Literal() :
{
    Token t;
    Literal res;
}
{
    (
        <NULL>                  { res = Literal.create( null ); } |
        <TRUE>                  { res = Literal.create( Boolean.TRUE ); } |
        <FALSE>                 { res = Literal.create( Boolean.FALSE ); } |
        t = <INTEGER_LITERAL>   { res = Literal.create( new BigInteger( t.image ) ); } |
        t = <DECIMAL_LITERAL>   { res = Literal.create( new BigDecimal( t.image ) ); } |   
        t = <STRING_LITERAL>    { res = Literal.create( StringLiteral.fromToken( t.image ) ); }
    )
    {
        return res;
    }
}


String Identifier() :
{
    Token t;
}
{
    t = <IDENTIFIER>
    {
        return t.image;
    }
}

String QualifiedName() :
{
    String ns = null;
    String local = null;
}
{
    (
        (
            LOOKAHEAD( Identifier() <COLON> )
            ns = Identifier()
            <COLON>
        )?
        local = Identifier()
    )
    {
        if( ns == null )
        {
            return local;
        }
        else
        {
            return ns + ":" + local;
        }
    }
}
