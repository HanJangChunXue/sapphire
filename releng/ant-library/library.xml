<!-- 
 ******************************************************************************
 * Copyright (c) 2015 Oracle
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Konstantin Komissarchik - initial implementation and ongoing maintenance
 ******************************************************************************
-->

<project name="sapphire-releng-antlib">

  <target name="init-library" unless="init.library.completed">

    <property environment="env"/>
  
    <dirname property=".base.dir" file="${ant.file.sapphire-releng-antlib}"/>
    
    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <pathelement location="${.base.dir}/../ant-contrib/ant-contrib-1.0b3.jar"/>
      </classpath>
    </taskdef>

    <property name=".src.dir" value="${.base.dir}/src"/>
    <property name=".classes.dir" value="${.base.dir}/bin"/>
    <property name=".antlib.jar" value="${.base.dir}/sapphire-releng-antlib.jar"/>
    
    <if>
      <uptodate targetfile="${.antlib.jar}">
        <srcfiles dir="${.src.dir}" includes="**/*"/>
      </uptodate>
      <then>
        <echo message="Found an up-to-date version of Sapphire releng Ant library. Skipping build..."/>
      </then>
      <else>
        <echo message="Building Sapphire releng Ant library..."/>
        <delete dir="${.classes.dir}" quiet="true"/>
        <mkdir dir="${.classes.dir}"/>
        <javac debug="true" destdir="${.classes.dir}" source="1.8" target="1.8">
          <src path="${.src.dir}"/>
        </javac>
        <jar destfile="${.antlib.jar}">
          <fileset dir="${.classes.dir}"/>
          <fileset dir="${.src.dir}" excludes="**/*.java"/>
        </jar>
      </else>
    </if>
    
    <taskdef resource="org/eclipse/sapphire/releng/ant/library.xml">
      <classpath>
        <pathelement location="${.antlib.jar}"/>
      </classpath>
    </taskdef>

    <var name="DSTAMP" unset="true"/>

    <tstamp>
      <format property="DSTAMP" pattern="yyyyMMddHHmm"/>
    </tstamp>
    
    <if>
      <os family="windows"/>
      <then>
        <var name="p2.os" value="win32"/>
        <var name="p2.ws" value="win32"/>
        <if>
          <os arch="x86"/>
          <then>
            <var name="p2.arch" value="x86"/>
          </then>
          <else>
            <var name="p2.arch" value="x86_64"/>
          </else>
        </if>
      </then>
      <elseif>
        <os family="mac"/>
        <then>
          <var name="p2.os" value="macosx"/>
          <var name="p2.ws" value="cocoa"/>
          <if>
            <os arch="x86"/>
            <then>
              <var name="p2.arch" value="x86"/>
            </then>
            <else>
              <var name="p2.arch" value="x86_64"/>
            </else>
          </if>
        </then>
      </elseif>
      <elseif>
        <os family="unix"/>
        <then>
          <var name="p2.os" value="linux"/>
          <var name="p2.ws" value="gtk"/>
          <if>
            <os arch="i386"/>
            <then>
              <var name="p2.arch" value="x86"/>
            </then>
            <else>
              <var name="p2.arch" value="x86_64"/>
            </else>
          </if>
        </then>
      </elseif>
      <else>
        <fail message="Unable to identify the operating system."/>
      </else>
    </if>

    <!-- Define properties for frequently-used locations -->
      
    <normalize-path property="root.dir" path="${.base.dir}/../.."/>
    <property name="build.dir" value="${root.dir}/build"/>
    <property name="releng.dir" value="${root.dir}/releng"/>

    <!-- Load build properties -->
      
    <property file="${root.dir}/build.properties"/>
    <property file="${releng.dir}/installables.properties"/>
    
    <!-- Determine the location of the shared bundle pool -->
    
    <if>
      <not><isset property="bundle.pool"/></not>
      <then>
        <if>
          <isset property="env.SAPPHIRE_BUNDLE_POOL"/>
          <then>
            <var name="bundle.pool" value="${env.SAPPHIRE_BUNDLE_POOL}"/>
          </then>
          <else>
            <var name="bundle.pool" value="${releng.dir}/pool"/>
          </else>
        </if>
      </then>
    </if>
      
    <property name="init.library.completed" value="true"/>

    <var name=".base.dir" unset="true"/>
    <var name=".src.dir" unset="true"/>
    <var name=".classes.dir" unset="true"/>
    <var name=".antlib.jar" unset="true"/>
    
  </target>


  <target name="init-jdk" depends="init-library">
    <init-jdk version="6"/>
    <init-jdk version="7"/>
    <init-jdk version="8"/>
  </target>


  <macrodef name="init-jdk">
    <attribute name="version"/>
    <sequential>

      <if>
        <not><isset property="env.JDK_@{version}_HOME"/></not>
        <then>
          <fail message="Could not locate JDK @{version}. Environment variable JDK_@{version}_HOME not set."/>
        </then>
      </if>

      <var name=".location" unset="true"/>
      <var name=".prefix" unset="true"/>
      <var name=".compiler.path" unset="true"/>
      <var name=".system.classpath" unset="true"/>

      <propertycopy property=".location" from="env.JDK_@{version}_HOME"/>
      <property name=".prefix" value="java.@{version}"/>

      <if>
        <os family="windows"/>
        <then>
          <property name=".compiler.path" value="${.location}/bin/javac.exe"/>
        </then>
        <else>
          <property name=".compiler.path" value="${.location}/bin/javac"/>
        </else>
      </if>

      <pathconvert property=".system.classpath">
        <fileset dir="${.location}">
          <include name="lib/*.jar"/>
          <include name="jre/lib/*.jar"/>
        </fileset>
        <fileset dir="${.location}/..">   <!-- Accounts for Java 6 layout on Mac OS X -->
          <include name="Classes/*.jar"/>
        </fileset>
      </pathconvert>

      <property name="${.prefix}.compiler.path" value="${.compiler.path}"/>
      <property name="${.prefix}.system.classpath" value="${.system.classpath}"/>

      <echo message="Java @{version} Compiler Path : ${.compiler.path}"/>
      <echo message="Java @{version} System Classpath : ${.system.classpath}"/>

      <var name=".location" unset="true"/>
      <var name=".prefix" unset="true"/>
      <var name=".compiler.path" unset="true"/>
      <var name=".system.classpath" unset="true"/>

    </sequential>
  </macrodef>


  <!--
    The p2 system handles installing Eclipse at various phases of the build.
  -->
  
  <target name="install-p2" depends="init">

    <property name="p2" value="${build.dir}/p2"/>

    <if>
      <not><available file="${p2}"/></not>
      <then>
        <unzip src="${releng.dir}/p2/p2.zip" dest="${p2}"/>
      </then>
    </if>

  </target>

  <target name="clean-p2" depends="init">

    <delete dir="${build.dir}/p2" quiet="true"/>
    <var name="p2" unset="true"/>

  </target>

  
  <!--
    The builder is an eclipse installation that includes the PDE Builder that's used by the build
    system to actually build the plugins and features. The builder is installed from the recommended
    configuration, regardless of the configuration that's being built.
  -->

  <target name="install-builder" depends="install-p2">

    <property name="builder" value="${build.dir}/builder"/>

    <if>
      <not><available file="${builder}"/></not>
      <then>
        <install-eclipse dest="${builder}" extensions="${iu.pde}"/>
      </then>
    </if>

  </target>
  
  <target name="clean-builder" depends="init">

    <delete dir="${build.dir}/builder" quiet="true"/>
    <var name="builder" unset="true"/>

  </target>


  <!--
    install-eclipse
  -->
  
  <macrodef name="install-eclipse">
    <attribute name="dest"/>
    <attribute name="configuration" default="${configuration.recommended}"/>
    <attribute name="extensions" default=""/>
    <sequential>
    
      <!-- Delete the destination folder -->
      
      <delete dir="@{dest}" quiet="true"/>
      
      <!-- Remove profiles associated with the destination folder from the profile registry in the shared bundle pool -->
      
      <normalize-path property=".normalized.dest.path" path="@{dest}"/>
      
      <if>
        <available file="${bundle.pool}/p2/org.eclipse.equinox.p2.engine/profileRegistry" type="dir"/>
        <then>
        
          <for param="profile.folder">
            <path>
              <dirset dir="${bundle.pool}/p2/org.eclipse.equinox.p2.engine/profileRegistry" includes="*.profile"/>
            </path>
            <sequential>
              <if>
                <available file="@{profile.folder}/.owner"/>
                <then>
                  <loadfile property=".owner" srcFile="@{profile.folder}/.owner"/>
                  <if>
                    <equals arg1="${.owner}" arg2="${.normalized.dest.path}"/>
                    <then>
                      <delete dir="@{profile.folder}"/>
                    </then>
                  </if>
                  <var name=".owner" unset="true"/>
                </then>
              </if>
            </sequential>
          </for>
          
        </then>
      </if>
      
      <!-- Install eclipse by using p2 director -->
      
      <var name=".extensions" value="org.eclipse.platform,org.eclipse.platform.ide"/>
      <append property=".extensions" value="@{extensions}"/>
      
      <tstamp>
        <format property=".profile" pattern="yyyy-MM-dd_HH.mm.ss.SSS"/>
      </tstamp>
      
      <with-configuration name="@{configuration}">
        <if>
          <and>
            <os family="mac"/>
            <isfalse value="${.legacy.mac.layout}"/>
          </and>
          <then>
            <var name=".p2.director.dest" value="@{dest}/Eclipse.app/Contents/Eclipse"/>
          </then>
          <else>
            <var name=".p2.director.dest" value="@{dest}"/>
          </else>
        </if>
        <if>
          <isset property="build.repositories"/>
          <then>
            <append property=".repositories" value="${build.repositories}"/>
          </then>
        </if>
        <java classname="org.eclipse.core.launcher.Main" fork="true" failonerror="true">
          <classpath>
            <fileset dir="${p2}/plugins">
              <include name="**/org.eclipse.equinox.launcher_*.jar"/>
            </fileset>
          </classpath>
          <arg line="-application org.eclipse.equinox.p2.director"/>
          <arg line="-repository ${.repositories}"/>
          <arg line="-destination ${.p2.director.dest}"/>
          <arg line="-bundlepool ${bundle.pool}"/>
          <arg line="-shared ${bundle.pool}/p2"/>
          <arg line="-profile ${.profile}"/>
          <arg line="-profileProperties org.eclipse.update.install.features=true"/>
          <arg line="-installIU ${.extensions}"/>
          <arg line="-p2.os ${p2.os}"/>
          <arg line="-p2.ws ${p2.ws}"/>
          <arg line="-p2.arch ${p2.arch}"/>
          <jvmarg line="-Xmx512m"/>
        </java>
      </with-configuration>
      
      <var name=".p2.director.dest" unset="true"/>
      
      <!-- Add .owner file to the generated profile, so that we can track the install the profile belongs to -->
      
      <echo message="${.normalized.dest.path}" file="${bundle.pool}/p2/org.eclipse.equinox.p2.engine/profileRegistry/${.profile}.profile/.owner"/>
      
      <var name=".extensions" unset="true"/>
      <var name=".profile" unset="true"/>
      <var name=".normalized.dest.path" unset="true"/>
      
      <!-- Run p2 garbage collector so that unreferenced bundles are removed from the shared bundle pool -->
      
      <eclipse location="${builder}" application="org.eclipse.equinox.p2.garbagecollector.application"/>
      
      <!-- Update eclipse.ini -->
      
      <if>
        <available file="@{dest}/eclipse.ini"/>
        <then>
          <var name=".eclipse.ini" value="@{dest}/eclipse.ini"/>
        </then>
        <elseif>
          <available file="@{dest}/Eclipse.app/Contents/Eclipse/eclipse.ini"/>
          <then>
            <var name=".eclipse.ini" value="@{dest}/Eclipse.app/Contents/Eclipse/eclipse.ini"/>
          </then>
        </elseif>
        <elseif>
          <available file="@{dest}/eclipse.app/Contents/MacOS/eclipse.ini"/>
          <then>
            <var name=".eclipse.ini" value="@{dest}/eclipse.app/Contents/MacOS/eclipse.ini"/>
          </then>
        </elseif>
        <else>
          <fail message="Could not locate eclipse.ini file in @{dest}"/>
        </else>
      </if>
      
      <if>
        <contains string="${p2.arch}" substring="x86_64"/>
        <then>
          <replaceregexp file="${.eclipse.ini}" match="-Xmx[0-9]*m" replace="-Xmx1024m"/>
        </then>
        <else>
          <replaceregexp file="${.eclipse.ini}" match="-Xmx[0-9]*m" replace="-Xmx512m"/>
        </else>
      </if>
      
      <var name=".eclipse.ini" unset="true"/>
      
      <!-- Update config.ini to ensure that the splash screen will show -->
      <!-- https://bugs.eclipse.org/bugs/show_bug.cgi?id=274127 -->
      
      <if>
        <available file="@{dest}/Eclipse.app/Contents/Eclipse/configuration" type="dir"/>
        <then>
          <var name=".eclipse.configuration" value="@{dest}/Eclipse.app/Contents/Eclipse/configuration"/>
        </then>
        <else>
          <var name=".eclipse.configuration" value="@{dest}/configuration"/>
        </else>
      </if>
      
      <find-eclipse-bundle property=".platform.bundle" eclipse="@{dest}" bundle="org.eclipse.platform"/>
      <makeurl property=".platform.bundle.url" file="${.platform.bundle}"/>
      
      <propertyfile file="${.eclipse.configuration}/config.ini">
        <entry key="osgi.splashPath" value="${.platform.bundle.url}"/>
      </propertyfile>

      <var name=".eclipse.configuration" unset="true"/>
      <var name=".platform.bundle" unset="true"/>
      <var name=".platform.bundle.url" unset="true"/>
      
    </sequential>
  </macrodef>
  
  
  <!--
    eclipse
  -->
  
  <macrodef name="eclipse">
    <attribute name="location"/>
    <attribute name="application"/>
    <attribute name="failonerror" default="true"/>
    <attribute name="resultproperty" default=""/>
    <element name="args" optional="true" implicit="true"/>
    <sequential>
      <find-eclipse-bundle property=".launcher" eclipse="@{location}" bundle="org.eclipse.equinox.launcher"/>
      <if>
        <os family="mac"/>
        <then>
          <var name=".jvmargs" value="-Xmx1024m -XstartOnFirstThread"/>
        </then>
        <else>
          <var name=".jvmargs" value="-Xmx1024m"/>
        </else>
      </if>
      <if>
        <os family="mac"/>
        <then>
          <if>
            <available file="@{location}/Eclipse.app/Contents/Eclipse/configuration" type="dir"/>
            <then>
              <var name=".eclipse.configuration" value="@{location}/Eclipse.app/Contents/Eclipse/configuration"/>
            </then>
            <else>
              <var name=".eclipse.configuration" value="@{location}/configuration"/>
            </else>
          </if>
          <var name=".eclipse.install" value="@{location}/Eclipse.app/Contents/MacOS"/>
        </then>
        <else>
          <var name=".eclipse.configuration" value="@{location}/configuration"/>
          <var name=".eclipse.install" value="@{location}"/>
        </else>
      </if>
      <java classpath="${.launcher}" classname="org.eclipse.core.launcher.Main" fork="true" failonerror="@{failonerror}" resultproperty="@{resultproperty}">
        <jvmarg line="${.jvmargs}"/>
        <arg line="-application @{application}"/>
        <arg line="-configuration ${.eclipse.configuration}"/>
        <arg line="-install ${.eclipse.install}"/>
        <args/>
      </java>
      <var name=".launcher" unset="true"/>
      <var name=".jvmargs" unset="true"/>
      <var name=".eclipse.configuration" unset="true"/>
      <var name=".eclipse.install" unset="true"/>
    </sequential>
  </macrodef>
  
  
  <!--
    find-eclipse-executable-folder
  -->
  
  <macrodef name="find-eclipse-executable-folder">
    <attribute name="property"/>
    <attribute name="eclipse"/>
    <sequential>
      <if>
        <available file="@{eclipse}/Eclipse.app/Contents/MacOS" type="dir"/>
        <then>
          <var name="@{property}" value="@{eclipse}/Eclipse.app/Contents/MacOS"/>
        </then>
        <else>
          <var name="@{property}" value="@{eclipse}"/>
        </else>
      </if>
    </sequential>
  </macrodef>


  <!--
    find-eclipse-bundle
  -->
  
  <macrodef name="find-eclipse-bundle">
    <attribute name="property"/>
    <attribute name="eclipse"/>
    <attribute name="bundle"/>
    <sequential>
      
      <if>
        <available file="@{eclipse}/Eclipse.app/Contents/Eclipse" type="dir"/>
        <then>
          <var name=".eclipse.root" value="@{eclipse}/Eclipse.app/Contents/Eclipse"/>
        </then>
        <else>
          <var name=".eclipse.root" value="@{eclipse}"/>
        </else>
      </if>
      
      <var name=".bundles.info.file" value="${.eclipse.root}/configuration/org.eclipse.equinox.simpleconfigurator/bundles.info"/>
      <var name=".bundles.info.content" unset="true"/>
      <loadfile property=".bundles.info.content" srcFile="${.bundles.info.file}"/>
      
      <propertyregex property=".location" input="${.bundles.info.content}" regexp="@{bundle},[^,]+,([^,]+)" select="\1"/>
      <normalize-path property="@{property}" path="${.eclipse.root}/${.location}"/>
      
      <var name=".bundles.info.file" unset="true"/>
      <var name=".bundles.info.content" unset="true"/>
      <var name=".location" unset="true"/>
      
    </sequential>
  </macrodef>
  
  <target name="find-eclipse-bundle" depends="init">
  
    <fail unless="eclipse" message="Must specify eclipse property"/>
    <fail unless="bundle" message="Must specify bundle property"/>
    
    <find-eclipse-bundle property="location" eclipse="${eclipse}" bundle="${bundle}"/>
    
    <echo message="${location}"/>
  
  </target>
  
  
  <!--
    for-each-eclipse-bundle
  -->
  
  <macrodef name="for-each-eclipse-bundle">
    <attribute name="eclipse"/>
    <element name="body" implicit="yes"/>
    <sequential>

      <if>
        <available file="@{eclipse}/Eclipse.app/Contents/Eclipse" type="dir"/>
        <then>
          <var name=".eclipse.root" value="@{eclipse}/Eclipse.app/Contents/Eclipse"/>
        </then>
        <else>
          <var name=".eclipse.root" value="@{eclipse}"/>
        </else>
      </if>
      
      <var name=".bundles.info.file" value="${.eclipse.root}/configuration/org.eclipse.equinox.simpleconfigurator/bundles.info"/>
      <var name=".bundles.info.content" unset="true"/>
      <loadfile property=".bundles.info.content" srcFile="${.bundles.info.file}"/>
      
      <for list="${.bundles.info.content}" param="line" delimiter="&#13;&#10;">
        <sequential>
        
          <if>
            <not><matches string="@{line}" pattern="#.*"/></not>
            <then>
            
              <propertyregex property=".bundle.symbolic.name" input="@{line}" regexp="([^,]+),[^,]+,[^,]+" select="\1"/>
              <propertyregex property=".bundle.version" input="@{line}" regexp="[^,]+,([^,]+),[^,]+" select="\1"/>
              <propertyregex property=".bundle.location" input="@{line}" regexp="[^,]+,[^,]+,([^,]+)" select="\1"/>
              <normalize-path property=".bundle.location" path="${.eclipse.root}/${.bundle.location}"/>
              <basename property=".bundle.file.name" file="${.bundle.location}"/>
          
              <body/>

              <var name=".bundle.symbolic.name" unset="true"/>
              <var name=".bundle.version" unset="true"/>
              <var name=".bundle.location" unset="true"/>
              <var name=".bundle.file.name" unset="true"/>
              
            </then>
          </if>
          
        </sequential>
      </for>

    </sequential>
  </macrodef>
  

  <!--
    list-eclipse-bundles
  -->
  
  <target name="list-eclipse-bundles" depends="init">
  
    <fail unless="eclipse" message="Must specify eclipse property"/>
    
    <for-each-eclipse-bundle eclipse="${eclipse}">
      <echo/>
      <echo message="Symbolic Name: ${.bundle.symbolic.name}"/>
      <echo message="Version: ${.bundle.version}"/>
      <echo message="Location: ${.bundle.location}"/>
    </for-each-eclipse-bundle>
    
    <echo/>
    
  </target>
  

  <!--
    prune-bundle-pool
  -->
  
  <target name="prune-bundle-pool" depends="init">
  
    <if>
      <and>
        <not><istrue value="${skip.prune.bundle.pool}"/></not>
        <available file="${bundle.pool}/p2/org.eclipse.equinox.p2.engine/profileRegistry" type="dir"/>
      </and>
      <then>
        
        <for param="profile.folder">
          <path>
            <dirset dir="${bundle.pool}/p2/org.eclipse.equinox.p2.engine/profileRegistry" includes="*.profile"/>
          </path>
          <sequential>
            <if>
              <available file="@{profile.folder}/.owner"/>
              <then>
                <loadfile property=".owner" srcFile="@{profile.folder}/.owner"/>
                <if>
                  <not><available file="${.owner}"/></not>
                  <then>
                    <delete dir="@{profile.folder}"/>
                  </then>
                </if>
                <var name=".owner" unset="true"/>
              </then>
            </if>
          </sequential>
        </for>
          
      </then>
    </if>
  
  </target>
  
  
  <!--
    normalize-path
    
    Resolves parent folder (../) references in a path.
  -->
  
  <macrodef name="normalize-path">
    <attribute name="property"/>
    <attribute name="path"/>
    <sequential>
    
      <basename property=".basename" file="@{path}"/>
      <dirname property=".dirname" file="@{path}"/>
      
      <var name="@{property}" value="${.dirname}${file.separator}${.basename}"/>
      
      <var name=".basename" unset="true"/>
      <var name=".dirname" unset="true"/>
    
    </sequential>
  </macrodef>
  

  <!--
    dev-build
  -->

  <target name="dev-build" depends="clean,build,create-dev-eclipse,create-dev-target,prune-bundle-pool">
  </target>


  <!--
    hudson-build
  -->

  <target name="hudson-build" depends="clean,build,build-alt-configurations,export-documentation,run-tests,findbugs,prune-bundle-pool">
  </target>


  <!--
    full-build
  -->

  <target name="full-build" depends="clean,build,build-alt-configurations,create-dev-eclipse,create-dev-target,export-documentation,run-tests,findbugs,prune-bundle-pool">
  </target>


  <!--
    build-alt-configurations

    Builds against alternative supported configurations. The list of alternative
    configurations is defined to exclude the recommended configuration, which is covered by the
    build-repository target. The purpose of this target is only to verify clean compilation. As
    such, unlike build-repository target, this target does not perform any of the post-build
    processing or produce consumable binaries.
  -->

  <target name="build-alt-configurations" depends="install-builder">

    <for-each-configuration>
      <if>
        <not><equals arg1="${.configuration}" arg2="${configuration.recommended}"/></not>
        <then>
          <build-configuration name="${.configuration}"/>
        </then>
      </if>
    </for-each-configuration>

  </target>


  <!--
    build-configuration
  -->

  <target name="build-configuration" depends="install-builder">
  
    <fail unless="name" message="Must specify name property"/>
    
    <build-configuration name="${name}"/>

  </target>

  <macrodef name="build-configuration">
    <attribute name="name"/>
    <sequential>
    
      <echo message="Building Sapphire with @{name} configuration..."/>

      <with-target-platform configuration="@{name}">
        <pde-build target="${.target.platform}" feature="org.eclipse.sapphire.everything" build.id="${DSTAMP}"/>
      </with-target-platform>

      <delete file="${build.dir}/org.eclipse.sapphire.everything-${DSTAMP}.zip"/>
      
    </sequential>
  </macrodef>
  
  
  <!--
    load-configuration
  -->

  <macrodef name="load-configuration">
    <attribute name="name"/>
    <sequential>

      <if>
        <not><isset property="repositories.@{name}"/></not>
        <then>

          <echo message="Loading configuration @{name}..."/>

          <property file="${releng.dir}/repositories-@{name}.properties" prefix="."/>

          <if>
            <isset property=".p2.repositories"/>
            <then>
              <for list="${.p2.repositories}" param="repo">
                <sequential>
                  <load-repository url="@{repo}" property="repositories.@{name}"/>
                </sequential>
              </for>
            </then>
          </if>
          
          <if>
            <istrue value="${.legacy.mac.layout}"/>
            <then>
              <var name="legacy.mac.layout.@{name}" value="true"/>
            </then>
            <else>
              <var name="legacy.mac.layout.@{name}" value="false"/>
            </else>
          </if>

          <var name=".eclipse.platform.build" unset="true"/>
          <var name=".p2.repositories" unset="true"/>
          <var name=".legacy.mac.layout" unset="true"/>

        </then>
      </if>

    </sequential>
  </macrodef>


  <!--
    with-configuration
  -->

  <macrodef name="with-configuration">
    <attribute name="name"/>
    <element name="body" implicit="yes"/>
    <sequential>

      <load-configuration name="@{name}"/>
      <propertycopy property=".repositories" from="repositories.@{name}" override="true"/>
      <propertycopy property=".legacy.mac.layout" from="legacy.mac.layout.@{name}" override="true"/>
      <body/>
      <var name=".repositories" unset="true"/>
      <var name=".legacy.mac.layout" unset="true"/>

    </sequential>
  </macrodef>


  <!--
    for-each-configuration
  -->

  <macrodef name="for-each-configuration">
    <element name="body" implicit="yes"/>
    <sequential>

      <for list="${configurations}" param="configuration">
        <sequential>
          <var name=".configuration" value="@{configuration}"/>
          <body/>
          <var name=".configuration" unset="true"/>
        </sequential>
      </for>

    </sequential>
  </macrodef>


  <!--
    load-repository
  -->

  <macrodef name="load-repository">
    <attribute name="url"/>
    <attribute name="property"/>
    <sequential>
      <echo message="Using @{url}"/>
      <prepend property="@{property}" value="@{url}"/>
    </sequential>
  </macrodef>


  <!--
    load-build-repository
  -->

  <macrodef name="load-build-repository">
    <attribute name="url"/>
    <sequential>
      <load-repository url="@{url}" property="build.repositories"/>
    </sequential>
  </macrodef>


  <!--
    condition
  -->

  <macrodef name="condition">
    <attribute name="jar"/>
    <sequential>
      <basename property=".filename" file="@{jar}"/>
      <echo message="Conditioning ${.filename}"/>
      <exec executable="pack200">
        <arg value="-r"/>
        <arg value="@{jar}"/>
      </exec>
      <var name=".filename" unset="true"/>
    </sequential>
  </macrodef>


  <!--
    pack
  -->

  <macrodef name="pack">
    <attribute name="jar"/>
    <sequential>
      <basename property=".filename" file="@{jar}"/>
      <echo message="Packing ${.filename}"/>
      <exec executable="pack200">
        <arg value="-E9"/>
        <arg value="@{jar}.pack.gz"/>
        <arg value="@{jar}"/>
      </exec>
      <var name=".filename" unset="true"/>
    </sequential>
  </macrodef>


  <!--
    sign
  -->

  <macrodef name="sign">
    <attribute name="jar"/>
    <sequential>
      <if>
        <istrue value="${sign}"/>
        <then>
          <basename property=".filename" file="@{jar}"/>
          <dirname property=".dirname" file="@{jar}"/>
          <echo message="Signing ${.filename}"/>
          <exec dir="${.dirname}" executable="curl">
            <arg value="--output"/>
            <arg value="${.filename}"/>
            <arg value="--form"/>
            <arg value="filedata=@${.filename}"/>
            <arg value="--silent"/>
            <arg value="--show-error"/>
            <arg value="--fail"/>
            <arg value="http://build.eclipse.org:31338/sign"/>
          </exec>
          <var name=".filename" unset="true"/>
          <var name=".dirname" unset="true"/>
        </then>
      </if>
    </sequential>
  </macrodef>


  <!--
    append
  -->

  <macrodef name="append">
    <attribute name="property"/>
    <attribute name="value"/>
    <attribute name="separator" default=","/>
    <sequential>
      <if>
        <not><length string="@{value}" trim="true" length="0"/></not>
        <then>
          <if>
            <isset property="@{property}"/>
            <then>
              <propertycopy property=".value" from="@{property}" override="true"/>
              <var name="@{property}" value="${.value}@{separator}@{value}"/>
              <var name=".value" unset="true"/>
            </then>
            <else>
              <var name="@{property}" value="@{value}"/>
            </else>
          </if>
        </then>
      </if>
    </sequential>
  </macrodef>


  <!--
    prepend
  -->

  <macrodef name="prepend">
    <attribute name="property"/>
    <attribute name="value"/>
    <attribute name="separator" default=","/>
    <sequential>
      <if>
        <isset property="@{property}"/>
        <then>
          <propertycopy property=".value" from="@{property}" override="true"/>
          <var name="@{property}" value="@{value}@{separator}${.value}"/>
          <var name=".value" unset="true"/>
        </then>
        <else>
          <var name="@{property}" value="@{value}"/>
        </else>
      </if>
    </sequential>
  </macrodef>


  <!--
    property-from-set
  -->

  <macrodef name="property-from-set">
    <attribute name="property"/>
    <element name="set" implicit="true"/>
    <sequential>
      <pathconvert property="@{property}">
        <first count="1">
          <sort>
            <set/>
            <reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
              <name/>
            </reverse>
          </sort>
        </first>
      </pathconvert>
    </sequential>
  </macrodef>


  <!--
    expand-all
  -->

  <macrodef name="expand-all">
    <attribute name="source.dir"/>
    <attribute name="dest.dir" default="@{source.dir}"/>
    <attribute name="suffix" default="jar"/>
    <attribute name="includes" default="*.@{suffix}"/>
    <attribute name="excludes" default=""/>
    <element name="do" implicit="true" optional="true"/>
    <sequential>
      <for param="archive.file">
        <path>
          <fileset dir="@{source.dir}" includes="@{includes}" excludes="@{excludes}"/>
        </path>
        <sequential>
          <basename property="base.name" file="@{archive.file}" suffix="@{suffix}"/>
          <unzip src="@{archive.file}" dest="@{dest.dir}/${base.name}" overwrite="true"/>
          <do/>
          <var name="base.name" unset="true"/>
        </sequential>
      </for>
    </sequential>
  </macrodef>


  <!--
    zip-dirs
  -->

  <macrodef name="zip-dirs">
    <attribute name="source.dir"/>
    <attribute name="dest.dir" default="@{source.dir}"/>
    <attribute name="suffix" default="zip"/>
    <attribute name="includes" default="*"/>
    <attribute name="excludes" default=""/>
    <element name="do" optional="true" implicit="true"/>
    <sequential>
      <if>
        <available file="@{source.dir}"/>
        <then>
          <for param="dir">
            <path>
              <dirset dir="@{source.dir}" includes="@{includes}" excludes="@{excludes}"/>
            </path>
            <sequential>
              <basename property="dir.name" file="@{dir}"/>
              <property name="zip.file" value="@{dest.dir}/${dir.name}.@{suffix}"/>
              <zip destfile="${zip.file}">
                <fileset dir="@{dir}"/>
              </zip>
              <delete dir="@{dir}"/>
              <do/>
              <var name="zip.file" unset="true"/>
              <var name="dir.name" unset="true"/>
            </sequential>
          </for>
        </then>
      </if>
    </sequential>
  </macrodef>


  <macrodef name="p2.publish.FeaturesAndBundles">
    <attribute name="location"/>
    <attribute name="name" default="repository"/>
    <sequential>
      <eclipse location="${p2}" application="org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher">
        <arg line="-metadataRepository file:@{location}"/>
        <arg line="-artifactRepository file:@{location}"/>
        <arg line="-metadataRepositoryName &quot;@{name}&quot;"/>
        <arg line="-artifactRepositoryName &quot;@{name}&quot;"/>
        <arg line="-source @{location}"/>
        <arg line="-compress"/>
        <arg line="-publishArtifacts"/>
        <arg line="-reusePack200Files"/>
      </eclipse>
    </sequential>
  </macrodef>


  <macrodef name="p2.publish.UpdateSite">
    <attribute name="location"/>
    <attribute name="name" default="repository"/>
    <sequential>
      <eclipse location="${builder}" application="org.eclipse.equinox.p2.publisher.UpdateSitePublisher">
        <arg line="-metadataRepository file:@{location}"/>
        <arg line="-artifactRepository file:@{location}"/>
        <arg line="-metadataRepositoryName &quot;@{name}&quot;"/>
        <arg line="-artifactRepositoryName &quot;@{name}&quot;"/>
        <arg line="-source @{location}"/>
        <arg line="-compress"/>
        <arg line="-publishArtifacts"/>
        <arg line="-reusePack200Files"/>
      </eclipse>
    </sequential>
  </macrodef>


  <macrodef name="pde-build">
    <attribute name="target"/>
    <attribute name="feature"/>
    <attribute name="build.id"/>
    <attribute name="warnings" default="false"/>
    <element name="java-args" optional="true" implicit="true"/>
    <sequential>

      <clean-pde-build/>
      
      <find-eclipse-bundle property=".pdeBuildDir" eclipse="${builder}" bundle="org.eclipse.pde.build"/>
      
      <delete dir="${build.dir}/pde" quiet="true"/>
      <delete dir="${build.dir}/compilelogs" quiet="true"/>

      <mkdir dir="${build.dir}/pde"/>

      <copy
          file="${.pdeBuildDir}/templates/headless-build/build.properties"
          todir="${build.dir}/pde/builder"
          overwrite="true"/>

      <copy
          file="${.pdeBuildDir}/templates/headless-build/customTargets.xml"
          todir="${build.dir}/pde/builder"
          overwrite="true"/>

      <if>
        <and>
          <istrue value="@{warnings}"/>
          <istrue value="${warnings}"/>
        </and>
        <then>
          <property name="pde.build.compiler.arg" value=""/>
        </then>
        <else>
          <property name="pde.build.compiler.arg" value="-nowarn"/>
        </else>
      </if>
      
      <!-- Copy bundles from the target as PDE Build tends to pick up wrong versions of bundles when the
           target uses a shared bundle pool. -->
      
      <for-each-eclipse-bundle eclipse="@{target}">
        <if>
          <available file="${.bundle.location}" type="dir"/>
          <then>
            <copy todir="${build.dir}/pde/target/plugins/${.bundle.file.name}">
              <fileset dir="${.bundle.location}"/>
            </copy>
          </then>
          <else>
            <copy file="${.bundle.location}" tofile="${build.dir}/pde/target/plugins/${.bundle.file.name}"/>
          </else>
        </if>
      </for-each-eclipse-bundle>
      
      <eclipse location="${builder}" application="org.eclipse.ant.core.antRunner">
        <arg line="-clean"/>
        <arg line="-data ${build.dir}/pde/workspace"/>
        <arg line="-buildfile ${.pdeBuildDir}/scripts/build.xml"/>
        <arg value="-DtopLevelElementId=@{feature}"/>
        <arg value="-DarchivePrefix=eclipse"/>
        <arg value="-DbaseLocation=${build.dir}/pde/target"/>
        <arg value="-DbuildDirectory=${root.dir}"/>
        <arg value="-Dbuilder=${build.dir}/pde/builder"/>
        <arg value="-DcollectingFolder=collecting"/>
        <arg value="-DbuildId=@{build.id}"/>
        <arg value="-DbuildType=I"/>
        <arg value="-DbuildLabel=build"/>
        <arg value="-DforceContextQualifier=@{build.id}"/>
        <arg value="-DgenerateFeatureVersionSuffix=false"/>
        <arg value="-DindividualSourceBundles=true"/>
        <arg value="-DallowBinaryCycles=true" />
        <arg value="-DcompilerArg=${pde.build.compiler.arg}"/>
        <arg value="-DJavaSE-1.6=${java.6.system.classpath}"/>
        <arg value="-DJavaSE-1.7=${java.7.system.classpath}"/>
        <arg value="-DJavaSE-1.8=${java.8.system.classpath}"/>
        <arg value="-DjavacFailOnError=true"/>
        <arg value="-DjavacVerbose=${javacVerbose}"/>
        <arg value="-DjavacDebugInfo=true"/>
        <java-args/>
      </eclipse>

      <var name="pde.build.compiler.arg" unset="true"/>
      <var name=".pdeBuildDir" unset="true"/>

      <delete dir="${build.dir}/pde" quiet="true"/>
      <delete dir="${build.dir}/compilelogs" quiet="true"/>

      <clean-pde-build/>

    </sequential>
  </macrodef>


  <macrodef name="clean-pde-build">
    <sequential>
      <delete includeEmptyDirs="true" quiet="false" failOnError="false">
        <fileset dir="${root.dir}">
          <include name="final*.*"/>
          <include name="package*.*"/>
          <include name="assemble*.*"/>
          <include name="nestedJars/**"/>
        </fileset>
        <fileset dir="${root.dir}/plugins">
          <include name="**/javaCompiler.*.args"/>
          <include name="*/build.xml"/>
          <include name="*/@dot/**"/>
          <include name="*/temp.folder/**"/>
          <include name="*.source/**"/>
          <include name="*/src.zip"/>
          <include name="*/build/**"/>
          <include name="*/bin/**"/>
          <include name="*/@dot.log"/>
          <include name="*/.apt_generated/**"/>
          <include name="*/.resources/**"/>
          <include name="org.eclipse.*.source_*/**"/>
          <exclude name="**/.do-not-delete"/>
        </fileset>
        <fileset dir="${root.dir}/features">
          <include name="*/*.log.zip"/>
          <include name="*/build.xml"/>
          <include name="*/feature.temp.folder/**"/>
        </fileset>
      </delete>
    </sequential>
  </macrodef>

  
</project>
